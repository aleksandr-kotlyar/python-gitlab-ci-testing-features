.safety:
  stage: security
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"'
  before_script:
    - pip3 install safety
  tags:
    - gitlab-org

Safety:
  extends: .safety
  script:
    - safety check --full-report

Safety stdin:
  extends: .safety
  script:
    - pip3 freeze | safety check --stdin

Trivy:
  stage: security
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"'
  script:
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
    - apk -vv info|sort
    - trivy filesystem --exit-code 1 --skip-dirs /builds/gitlab-org-forks/ --cache-dir .trivycache/ /
  tags:
    - gitlab-org

Bandit:
  stage: security
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"'
  script:
    - pip3 install bandit
    - bandit -x $(pwd)/.venv/ -r $(pwd) -s B101
  tags:
    - gitlab-org

variables:
  DOCKER_HOST: "tcp://docker:2375/"
  DOCKERFILE: "Dockerfile" # name of the Dockerfile to analyse
  DOCKERIMAGE: "registry.gitlab.com/aleksandr-kotlyar/python_and_gitlab/python-3.7.6-alpine-req:ver-14-mimesis-4.1.2" # name of the Docker image to analyse
  # DOCKERIMAGE: "knqyf263/cve-2018-11235" # test Docker image with several CRITICAL CVE
  SHOWSTOPPER_PRIORITY: "CRITICAL" # what level of criticality will fail Trivy job
  TRIVYCACHE: "$CI_PROJECT_DIR/.cache" # where to cache Trivy database of vulnerabilities for faster reuse
  ARTIFACT_FOLDER: "$CI_PROJECT_DIR"

services:
  - docker:dind # to be able to build docker images inside the Runner

HadoLint:
  # Basic lint analysis of Dockerfile instructions
  stage: scan
  image: docker:git

  after_script:
    - cat $ARTIFACT_FOLDER/hadolint_results.json

  script:
    - export VERSION=$(wget -q -O - https://api.github.com/repos/hadolint/hadolint/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/hadolint/hadolint/releases/download/v${VERSION}/hadolint-Linux-x86_64 && chmod +x hadolint-Linux-x86_64

    # NB: hadolint will always exit with 0 exit code
    - ./hadolint-Linux-x86_64 -f json $DOCKERFILE > $ARTIFACT_FOLDER/hadolint_results.json || exit 0

  artifacts:
    when: always # return artifacts even after job failure
    paths:
      - $ARTIFACT_FOLDER/hadolint_results.json

Dockle:
  # Analysing best practices about docker image (users permissions, instructions followed when image was built, etc.)
  stage: scan
  image: docker:git

  after_script:
    - cat $ARTIFACT_FOLDER/dockle_results.json

  script:
    - export VERSION=$(wget -q -O - https://api.github.com/repos/goodwithtech/dockle/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.tar.gz && tar zxf dockle_${VERSION}_Linux-64bit.tar.gz
    - ./dockle --exit-code 1 -f json --output $ARTIFACT_FOLDER/dockle_results.json $DOCKERIMAGE

  artifacts:
    when: always # return artifacts even after job failure
    paths:
      - $ARTIFACT_FOLDER/dockle_results.json

TrivyNice:
  # Analysing docker image and package dependencies against several CVE bases
  stage: scan
  image: docker:git

  script:
    # getting the latest Trivy
    - apk add rpm
    - export VERSION=$(wget -q -O - https://api.github.com/repos/knqyf263/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/knqyf263/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz && tar zxf trivy_${VERSION}_Linux-64bit.tar.gz

    # displaying all vulnerabilities w/o failing the build
    - ./trivy -d --cache-dir $TRIVYCACHE -f json -o $ARTIFACT_FOLDER/trivy_results.json --exit-code 0 $DOCKERIMAGE

    # write vulnerabilities info to stdout in human readable format (reading pure json is not fun, eh?). You can remove this if you don't need this.
    - ./trivy -d --cache-dir $TRIVYCACHE --exit-code 0 $DOCKERIMAGE

    # failing the build if the SHOWSTOPPER priority is found
    - ./trivy -d --cache-dir $TRIVYCACHE --exit-code 1 --severity $SHOWSTOPPER_PRIORITY --quiet $DOCKERIMAGE

  artifacts:
    when: always # return artifacts even after job failure
    paths:
      - $ARTIFACT_FOLDER/trivy_results.json

  cache:
    paths:
      - .cache

Report:
  # combining tools outputs into one HTML
  stage: report
  when: always
  image: python:3.5

  script:
    - mkdir json
    - cp $ARTIFACT_FOLDER/*.json ./json/
    - pip install json2html
    - wget https://raw.githubusercontent.com/shad0wrunner/docker_cicd/master/convert_json_results.py
    - python ./convert_json_results.py

  artifacts:
    paths:
      - results.html